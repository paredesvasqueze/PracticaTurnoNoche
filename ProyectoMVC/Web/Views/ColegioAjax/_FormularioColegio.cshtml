@model Models.Colegio

<form id="formColegio" onsubmit="return submitColegio(this);" novalidate>
    @Html.AntiForgeryToken()
    <input asp-for="IdColegio" type="hidden" />

    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

    <div class="mb-3">
        <label asp-for="Nombre" class="form-label"></label>
        <input asp-for="Nombre" class="form-control" />
        <span asp-validation-for="Nombre" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="RUC" class="form-label"></label>
        <input asp-for="RUC" class="form-control" />
        <span asp-validation-for="RUC" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Direccion" class="form-label"></label>
        <input asp-for="Direccion" class="form-control" />
        <span asp-validation-for="Direccion" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Telefono" class="form-label"></label>
        <input asp-for="Telefono" class="form-control" />
        <span asp-validation-for="Telefono" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Email" class="form-label"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Director" class="form-label"></label>
        <input asp-for="Director" class="form-control" />
        <span asp-validation-for="Director" class="text-danger"></span>
    </div>

    <div class="form-check mb-3">
        <input asp-for="Estado" class="form-check-input" id="Estado" />
        <label asp-for="Estado" class="form-check-label"></label>
        <span asp-validation-for="Estado" class="text-danger"></span>
    </div>

    <div class="text-end">
        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancelar</button>
    </div>
</form>

@section Scripts {
    <script>
        async function submitColegio(form) {
            // Construir objeto desde los campos del formulario
            const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenInput ? tokenInput.value : '';

            const formData = new FormData(form);
            const obj = {};
            formData.forEach((value, key) => {
                // checkbox Estado puede aparecer como "on" o no según su estado; manejar explícitamente
                if (key === 'Estado') {
                    // Tomar el checked real del checkbox
                    const el = form.querySelector('#Estado');
                    obj[key] = el ? el.checked : (value === 'on');
                } else {
                    obj[key] = value;
                }
            });

            // Convertir IdColegio a number
            if (obj.IdColegio) obj.IdColegio = parseInt(obj.IdColegio);

            try {
                const res = await fetch('/ColegioAjax/Guardar', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(obj)
                });

                const data = await res.json();
                if (data.success) {
                    // Actualiza la UI según tu implementación: cerrar modal, recargar lista, mostrar toast...
                    if (typeof onColegioSaved === 'function') onColegioSaved();
                    else location.reload();
                } else {
                    alert(data.message || 'Error al guardar.');
                }
            } catch (err) {
                console.error(err);
                alert(err.message || 'Error de red al guardar.');
            }

            return false; // evitar submit tradicional
        }

        function closeModal() {
            // Placeholder: cierra modal si usas uno. Ajusta según implementación.
            if (typeof bootstrap !== 'undefined') {
                const modalEl = document.querySelector('.modal.show');
                if (modalEl) {
                    const modal = bootstrap.Modal.getInstance(modalEl);
                    modal?.hide();
                }
            }
        }

        // Inicializa validación de cliente para el formulario cargado dinámicamente.
        // Llamar a setupColegioValidation() desde el código que inserta este partial (Index) justo después de innerHTML = html.
        function setupColegioValidation() {
            const form = document.getElementById('formColegio');
            if (!form) return;

            // Si está disponible jQuery + unobtrusive, parsea los atributos data-val para activar validación
            if (window.jQuery && jQuery.validator && jQuery.validator.unobtrusive) {
                $.validator.unobtrusive.parse(form);
            }

            // Añadir comprobación HTML5 + clases de Bootstrap para feedback visual
            // (no evita la ejecución del submit handler definido en Index; solo previene envíos inválidos)
            form.addEventListener('submit', function (e) {
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                    form.classList.add('was-validated');
                    // mostrar resumen de validación si hay errores
                    const summary = form.querySelector('[asp-validation-summary]') || form.querySelector('div[role="alert"]');
                    // no hacemos más aquí; submitColegio también puede validar antes de enviar
                    return false;
                }
                // si es válido, dejar que submitColegio maneje el envío AJAX
            }, false);
        }
    </script>
}